syntax = "proto3";

import "google/protobuf/timestamp.proto";


// The Mux service for the hum
service Mux {

    // Send data, one item per message, collected from the hum
    rpc Inject (stream InjectRequest) returns (InjectResponse);

    // Listen to the hum
    rpc Listen (ListenRequest) returns (stream ListenResponse);

    // Ping debugging endpoint
    rpc Ping (PingRequest) returns (PingResponse);
}


message InjectRequest {
    Datum datum = 1;
}

message InjectResponse {
    int32 msg_count = 1;
}

message ListenRequest {

    // Filter in data by tag
    repeated string include_tags = 1;

    // Filter out data by tag
    repeated string exclude_tags = 2;
}

message ListenResponse {
    Datum datum = 1;
}

message PingRequest {
    bool ping = 1;
}

message PingResponse {
    bool pong = 1;
}


// ----------------------------------------------------------------------------
// Shared messages
// ----------------------------------------------------------------------------

// Core datum/event structure
message Datum {

    // timestamp of the event (if available)
    google.protobuf.Timestamp uts_event = 1;

    // timestamp at time of collection
    google.protobuf.Timestamp uts_collected = 2;

    // source of the data / event
    // TODO(cmc): should this be an enum?
    //    source --> collector, parser
    string source = 3;

    // data
    string data = 4;

    // data format
    DataForm form = 5;
    enum DataForm {
        UNKNOWN = 0;
        STRING = 1;
        CSV = 2;
        JSON = 3;
    }

    // internal tags for the data
    repeated string tags = 6;

}


