// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: proto/mux.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Datum_DataForm int32

const (
	Datum_UNKNOWN Datum_DataForm = 0
	Datum_STRING  Datum_DataForm = 1
	Datum_CSV     Datum_DataForm = 2
	Datum_JSON    Datum_DataForm = 3
)

// Enum value maps for Datum_DataForm.
var (
	Datum_DataForm_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "CSV",
		3: "JSON",
	}
	Datum_DataForm_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"CSV":     2,
		"JSON":    3,
	}
)

func (x Datum_DataForm) Enum() *Datum_DataForm {
	p := new(Datum_DataForm)
	*p = x
	return p
}

func (x Datum_DataForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Datum_DataForm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mux_proto_enumTypes[0].Descriptor()
}

func (Datum_DataForm) Type() protoreflect.EnumType {
	return &file_proto_mux_proto_enumTypes[0]
}

func (x Datum_DataForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Datum_DataForm.Descriptor instead.
func (Datum_DataForm) EnumDescriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{6, 0}
}

type InjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datum *Datum `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *InjectRequest) Reset() {
	*x = InjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mux_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectRequest) ProtoMessage() {}

func (x *InjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mux_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectRequest.ProtoReflect.Descriptor instead.
func (*InjectRequest) Descriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{0}
}

func (x *InjectRequest) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

type InjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgCount int32 `protobuf:"varint,1,opt,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty"`
}

func (x *InjectResponse) Reset() {
	*x = InjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mux_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectResponse) ProtoMessage() {}

func (x *InjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mux_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectResponse.ProtoReflect.Descriptor instead.
func (*InjectResponse) Descriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{1}
}

func (x *InjectResponse) GetMsgCount() int32 {
	if x != nil {
		return x.MsgCount
	}
	return 0
}

type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter in data by tag
	IncludeTags []string `protobuf:"bytes,1,rep,name=include_tags,json=includeTags,proto3" json:"include_tags,omitempty"`
	// Filter out data by tag
	ExcludeTags []string `protobuf:"bytes,2,rep,name=exclude_tags,json=excludeTags,proto3" json:"exclude_tags,omitempty"`
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mux_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mux_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{2}
}

func (x *ListenRequest) GetIncludeTags() []string {
	if x != nil {
		return x.IncludeTags
	}
	return nil
}

func (x *ListenRequest) GetExcludeTags() []string {
	if x != nil {
		return x.ExcludeTags
	}
	return nil
}

type ListenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datum *Datum `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *ListenResponse) Reset() {
	*x = ListenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mux_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenResponse) ProtoMessage() {}

func (x *ListenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mux_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{3}
}

func (x *ListenResponse) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ping bool `protobuf:"varint,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mux_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mux_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{4}
}

func (x *PingRequest) GetPing() bool {
	if x != nil {
		return x.Ping
	}
	return false
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong bool `protobuf:"varint,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mux_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mux_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{5}
}

func (x *PingResponse) GetPong() bool {
	if x != nil {
		return x.Pong
	}
	return false
}

// Core datum/event structure
type Datum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp of the event (if available)
	UtsEvent *timestamp.Timestamp `protobuf:"bytes,1,opt,name=uts_event,json=utsEvent,proto3" json:"uts_event,omitempty"`
	// timestamp at time of collection
	UtsCollected *timestamp.Timestamp `protobuf:"bytes,2,opt,name=uts_collected,json=utsCollected,proto3" json:"uts_collected,omitempty"`
	// source of the data / event
	// TODO(cmc): should this be an enum?
	//    source --> collector, parser
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// data
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// data format
	Form Datum_DataForm `protobuf:"varint,5,opt,name=form,proto3,enum=Datum_DataForm" json:"form,omitempty"`
	// internal tags for the data
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Datum) Reset() {
	*x = Datum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mux_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mux_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_proto_mux_proto_rawDescGZIP(), []int{6}
}

func (x *Datum) GetUtsEvent() *timestamp.Timestamp {
	if x != nil {
		return x.UtsEvent
	}
	return nil
}

func (x *Datum) GetUtsCollected() *timestamp.Timestamp {
	if x != nil {
		return x.UtsCollected
	}
	return nil
}

func (x *Datum) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Datum) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Datum) GetForm() Datum_DataForm {
	if x != nil {
		return x.Form
	}
	return Datum_UNKNOWN
}

func (x *Datum) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_proto_mux_proto protoreflect.FileDescriptor

var file_proto_mux_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x75, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x0d, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x22, 0x2d, 0x0a, 0x0e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x55, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x22, 0x2e, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x22, 0x21, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x22, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x9e,
	0x02, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x74, 0x73, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x75, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x44,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x36, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x53, 0x56, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x32,
	0x84, 0x01, 0x0a, 0x03, 0x4d, 0x75, 0x78, 0x12, 0x2b, 0x0a, 0x06, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x0e, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x0e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x23, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x79, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x65, 0x72,
	0x2f, 0x67, 0x65, 0x6e, 0x2d, 0x6d, 0x75, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_mux_proto_rawDescOnce sync.Once
	file_proto_mux_proto_rawDescData = file_proto_mux_proto_rawDesc
)

func file_proto_mux_proto_rawDescGZIP() []byte {
	file_proto_mux_proto_rawDescOnce.Do(func() {
		file_proto_mux_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_mux_proto_rawDescData)
	})
	return file_proto_mux_proto_rawDescData
}

var file_proto_mux_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_mux_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_mux_proto_goTypes = []interface{}{
	(Datum_DataForm)(0),         // 0: Datum.DataForm
	(*InjectRequest)(nil),       // 1: InjectRequest
	(*InjectResponse)(nil),      // 2: InjectResponse
	(*ListenRequest)(nil),       // 3: ListenRequest
	(*ListenResponse)(nil),      // 4: ListenResponse
	(*PingRequest)(nil),         // 5: PingRequest
	(*PingResponse)(nil),        // 6: PingResponse
	(*Datum)(nil),               // 7: Datum
	(*timestamp.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_proto_mux_proto_depIdxs = []int32{
	7, // 0: InjectRequest.datum:type_name -> Datum
	7, // 1: ListenResponse.datum:type_name -> Datum
	8, // 2: Datum.uts_event:type_name -> google.protobuf.Timestamp
	8, // 3: Datum.uts_collected:type_name -> google.protobuf.Timestamp
	0, // 4: Datum.form:type_name -> Datum.DataForm
	1, // 5: Mux.Inject:input_type -> InjectRequest
	3, // 6: Mux.Listen:input_type -> ListenRequest
	5, // 7: Mux.Ping:input_type -> PingRequest
	2, // 8: Mux.Inject:output_type -> InjectResponse
	4, // 9: Mux.Listen:output_type -> ListenResponse
	6, // 10: Mux.Ping:output_type -> PingResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_mux_proto_init() }
func file_proto_mux_proto_init() {
	if File_proto_mux_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_mux_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mux_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mux_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mux_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mux_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mux_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_mux_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_mux_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_mux_proto_goTypes,
		DependencyIndexes: file_proto_mux_proto_depIdxs,
		EnumInfos:         file_proto_mux_proto_enumTypes,
		MessageInfos:      file_proto_mux_proto_msgTypes,
	}.Build()
	File_proto_mux_proto = out.File
	file_proto_mux_proto_rawDesc = nil
	file_proto_mux_proto_goTypes = nil
	file_proto_mux_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MuxClient is the client API for Mux service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MuxClient interface {
	// Endpoint for collectors to send data, one item per message
	Inject(ctx context.Context, opts ...grpc.CallOption) (Mux_InjectClient, error)
	// Endpoint for listening to incoming messages
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Mux_ListenClient, error)
	// Ping debugging endpoint
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type muxClient struct {
	cc grpc.ClientConnInterface
}

func NewMuxClient(cc grpc.ClientConnInterface) MuxClient {
	return &muxClient{cc}
}

func (c *muxClient) Inject(ctx context.Context, opts ...grpc.CallOption) (Mux_InjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mux_serviceDesc.Streams[0], "/Mux/Inject", opts...)
	if err != nil {
		return nil, err
	}
	x := &muxInjectClient{stream}
	return x, nil
}

type Mux_InjectClient interface {
	Send(*InjectRequest) error
	CloseAndRecv() (*InjectResponse, error)
	grpc.ClientStream
}

type muxInjectClient struct {
	grpc.ClientStream
}

func (x *muxInjectClient) Send(m *InjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *muxInjectClient) CloseAndRecv() (*InjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *muxClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Mux_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mux_serviceDesc.Streams[1], "/Mux/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &muxListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mux_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type muxListenClient struct {
	grpc.ClientStream
}

func (x *muxListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *muxClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/Mux/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MuxServer is the server API for Mux service.
type MuxServer interface {
	// Endpoint for collectors to send data, one item per message
	Inject(Mux_InjectServer) error
	// Endpoint for listening to incoming messages
	Listen(*ListenRequest, Mux_ListenServer) error
	// Ping debugging endpoint
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

// UnimplementedMuxServer can be embedded to have forward compatible implementations.
type UnimplementedMuxServer struct {
}

func (*UnimplementedMuxServer) Inject(Mux_InjectServer) error {
	return status.Errorf(codes.Unimplemented, "method Inject not implemented")
}
func (*UnimplementedMuxServer) Listen(*ListenRequest, Mux_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedMuxServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterMuxServer(s *grpc.Server, srv MuxServer) {
	s.RegisterService(&_Mux_serviceDesc, srv)
}

func _Mux_Inject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MuxServer).Inject(&muxInjectServer{stream})
}

type Mux_InjectServer interface {
	SendAndClose(*InjectResponse) error
	Recv() (*InjectRequest, error)
	grpc.ServerStream
}

type muxInjectServer struct {
	grpc.ServerStream
}

func (x *muxInjectServer) SendAndClose(m *InjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *muxInjectServer) Recv() (*InjectRequest, error) {
	m := new(InjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mux_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MuxServer).Listen(m, &muxListenServer{stream})
}

type Mux_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type muxListenServer struct {
	grpc.ServerStream
}

func (x *muxListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Mux_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mux/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mux_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Mux",
	HandlerType: (*MuxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Mux_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inject",
			Handler:       _Mux_Inject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _Mux_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mux.proto",
}
