// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/mux.proto

package mux

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Datum_DataForm int32

const (
	Datum_UNKNOWN Datum_DataForm = 0
	Datum_RAW     Datum_DataForm = 1
	Datum_CSV     Datum_DataForm = 2
	Datum_JSON    Datum_DataForm = 3
)

var Datum_DataForm_name = map[int32]string{
	0: "UNKNOWN",
	1: "RAW",
	2: "CSV",
	3: "JSON",
}

var Datum_DataForm_value = map[string]int32{
	"UNKNOWN": 0,
	"RAW":     1,
	"CSV":     2,
	"JSON":    3,
}

func (x Datum_DataForm) String() string {
	return proto.EnumName(Datum_DataForm_name, int32(x))
}

func (Datum_DataForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{6, 0}
}

type InjectRequest struct {
	Datum                *Datum   `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InjectRequest) Reset()         { *m = InjectRequest{} }
func (m *InjectRequest) String() string { return proto.CompactTextString(m) }
func (*InjectRequest) ProtoMessage()    {}
func (*InjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{0}
}

func (m *InjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InjectRequest.Unmarshal(m, b)
}
func (m *InjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InjectRequest.Marshal(b, m, deterministic)
}
func (m *InjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectRequest.Merge(m, src)
}
func (m *InjectRequest) XXX_Size() int {
	return xxx_messageInfo_InjectRequest.Size(m)
}
func (m *InjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InjectRequest proto.InternalMessageInfo

func (m *InjectRequest) GetDatum() *Datum {
	if m != nil {
		return m.Datum
	}
	return nil
}

type InjectResponse struct {
	MsgCount             int32    `protobuf:"varint,1,opt,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InjectResponse) Reset()         { *m = InjectResponse{} }
func (m *InjectResponse) String() string { return proto.CompactTextString(m) }
func (*InjectResponse) ProtoMessage()    {}
func (*InjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{1}
}

func (m *InjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InjectResponse.Unmarshal(m, b)
}
func (m *InjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InjectResponse.Marshal(b, m, deterministic)
}
func (m *InjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectResponse.Merge(m, src)
}
func (m *InjectResponse) XXX_Size() int {
	return xxx_messageInfo_InjectResponse.Size(m)
}
func (m *InjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InjectResponse proto.InternalMessageInfo

func (m *InjectResponse) GetMsgCount() int32 {
	if m != nil {
		return m.MsgCount
	}
	return 0
}

type ListenRequest struct {
	// Filter in data by tag
	IncludeTags []string `protobuf:"bytes,1,rep,name=include_tags,json=includeTags,proto3" json:"include_tags,omitempty"`
	// Filter out data by tag
	ExcludeTags          []string `protobuf:"bytes,2,rep,name=exclude_tags,json=excludeTags,proto3" json:"exclude_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenRequest) Reset()         { *m = ListenRequest{} }
func (m *ListenRequest) String() string { return proto.CompactTextString(m) }
func (*ListenRequest) ProtoMessage()    {}
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{2}
}

func (m *ListenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenRequest.Unmarshal(m, b)
}
func (m *ListenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenRequest.Marshal(b, m, deterministic)
}
func (m *ListenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenRequest.Merge(m, src)
}
func (m *ListenRequest) XXX_Size() int {
	return xxx_messageInfo_ListenRequest.Size(m)
}
func (m *ListenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenRequest proto.InternalMessageInfo

func (m *ListenRequest) GetIncludeTags() []string {
	if m != nil {
		return m.IncludeTags
	}
	return nil
}

func (m *ListenRequest) GetExcludeTags() []string {
	if m != nil {
		return m.ExcludeTags
	}
	return nil
}

type ListenResponse struct {
	Datum                *Datum   `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenResponse) Reset()         { *m = ListenResponse{} }
func (m *ListenResponse) String() string { return proto.CompactTextString(m) }
func (*ListenResponse) ProtoMessage()    {}
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{3}
}

func (m *ListenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenResponse.Unmarshal(m, b)
}
func (m *ListenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenResponse.Marshal(b, m, deterministic)
}
func (m *ListenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenResponse.Merge(m, src)
}
func (m *ListenResponse) XXX_Size() int {
	return xxx_messageInfo_ListenResponse.Size(m)
}
func (m *ListenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListenResponse proto.InternalMessageInfo

func (m *ListenResponse) GetDatum() *Datum {
	if m != nil {
		return m.Datum
	}
	return nil
}

type PingRequest struct {
	Ping                 bool     `protobuf:"varint,1,opt,name=ping,proto3" json:"ping,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{4}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetPing() bool {
	if m != nil {
		return m.Ping
	}
	return false
}

type PingResponse struct {
	Pong                 bool     `protobuf:"varint,1,opt,name=pong,proto3" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{5}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetPong() bool {
	if m != nil {
		return m.Pong
	}
	return false
}

// Core datum/event structure
type Datum struct {
	// timestamp of the event (if available)
	UtsEvent *timestamp.Timestamp `protobuf:"bytes,1,opt,name=uts_event,json=utsEvent,proto3" json:"uts_event,omitempty"`
	// timestamp at time of collection
	UtsCollected *timestamp.Timestamp `protobuf:"bytes,2,opt,name=uts_collected,json=utsCollected,proto3" json:"uts_collected,omitempty"`
	// source of the data / event
	// TODO(cmc): should this be an enum?
	//    source --> collector, parser
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// data
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// data format
	Form Datum_DataForm `protobuf:"varint,5,opt,name=form,proto3,enum=Datum_DataForm" json:"form,omitempty"`
	// internal tags for the data
	Tags                 []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Datum) Reset()         { *m = Datum{} }
func (m *Datum) String() string { return proto.CompactTextString(m) }
func (*Datum) ProtoMessage()    {}
func (*Datum) Descriptor() ([]byte, []int) {
	return fileDescriptor_4935fe522b0ff4e1, []int{6}
}

func (m *Datum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Datum.Unmarshal(m, b)
}
func (m *Datum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Datum.Marshal(b, m, deterministic)
}
func (m *Datum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Datum.Merge(m, src)
}
func (m *Datum) XXX_Size() int {
	return xxx_messageInfo_Datum.Size(m)
}
func (m *Datum) XXX_DiscardUnknown() {
	xxx_messageInfo_Datum.DiscardUnknown(m)
}

var xxx_messageInfo_Datum proto.InternalMessageInfo

func (m *Datum) GetUtsEvent() *timestamp.Timestamp {
	if m != nil {
		return m.UtsEvent
	}
	return nil
}

func (m *Datum) GetUtsCollected() *timestamp.Timestamp {
	if m != nil {
		return m.UtsCollected
	}
	return nil
}

func (m *Datum) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Datum) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Datum) GetForm() Datum_DataForm {
	if m != nil {
		return m.Form
	}
	return Datum_UNKNOWN
}

func (m *Datum) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterEnum("Datum_DataForm", Datum_DataForm_name, Datum_DataForm_value)
	proto.RegisterType((*InjectRequest)(nil), "InjectRequest")
	proto.RegisterType((*InjectResponse)(nil), "InjectResponse")
	proto.RegisterType((*ListenRequest)(nil), "ListenRequest")
	proto.RegisterType((*ListenResponse)(nil), "ListenResponse")
	proto.RegisterType((*PingRequest)(nil), "PingRequest")
	proto.RegisterType((*PingResponse)(nil), "PingResponse")
	proto.RegisterType((*Datum)(nil), "Datum")
}

func init() { proto.RegisterFile("proto/mux.proto", fileDescriptor_4935fe522b0ff4e1) }

var fileDescriptor_4935fe522b0ff4e1 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x71, 0xd3, 0x66, 0xd3, 0x49, 0x9b, 0x56, 0x3e, 0xa0, 0x28, 0x20, 0xd1, 0x0d, 0x97,
	0x48, 0x68, 0x5d, 0xd4, 0x3d, 0x70, 0x44, 0xa8, 0x80, 0xc4, 0xbf, 0x2e, 0xf2, 0xee, 0xb2, 0xc7,
	0x2a, 0x9b, 0x7a, 0xad, 0xa0, 0x26, 0x2e, 0xb5, 0x8d, 0xfa, 0x00, 0xbc, 0x05, 0x2f, 0x8b, 0x6c,
	0xc7, 0x52, 0x7b, 0x61, 0x2f, 0xd1, 0xcc, 0xe4, 0x37, 0xa3, 0xf1, 0xf7, 0x0d, 0x4c, 0x76, 0x7b,
	0xa1, 0xc4, 0xbc, 0xd1, 0x07, 0x62, 0xa3, 0xec, 0x05, 0x17, 0x82, 0x6f, 0xd9, 0xdc, 0x66, 0xf7,
	0xfa, 0x61, 0xae, 0xea, 0x86, 0x49, 0x55, 0x36, 0x3b, 0x07, 0xe4, 0x17, 0x30, 0xfe, 0xd4, 0xfe,
	0x64, 0x95, 0xa2, 0xec, 0x97, 0x66, 0x52, 0xe1, 0xe7, 0x30, 0xd8, 0x94, 0x4a, 0x37, 0x29, 0x9a,
	0xa1, 0x22, 0x5e, 0x84, 0xe4, 0xbd, 0xc9, 0xa8, 0x2b, 0xe6, 0x17, 0x90, 0x78, 0x5c, 0xee, 0x44,
	0x2b, 0x19, 0x7e, 0x06, 0xc3, 0x46, 0xf2, 0x75, 0x25, 0x74, 0xab, 0x6c, 0xcf, 0x80, 0x46, 0x8d,
	0xe4, 0x4b, 0x93, 0xe7, 0xb7, 0x30, 0xfe, 0x5a, 0x4b, 0xc5, 0x5a, 0x3f, 0xfd, 0x1c, 0x46, 0x75,
	0x5b, 0x6d, 0xf5, 0x86, 0xad, 0x55, 0xc9, 0x65, 0x8a, 0x66, 0x41, 0x31, 0xa4, 0x71, 0x57, 0xbb,
	0x29, 0xb9, 0x34, 0x08, 0x3b, 0x1c, 0x21, 0x3d, 0x87, 0x74, 0x35, 0x83, 0xe4, 0x04, 0x12, 0x3f,
	0xb6, 0xdb, 0xe2, 0xff, 0x5b, 0x9f, 0x43, 0xfc, 0xbd, 0x6e, 0xb9, 0x5f, 0x02, 0x43, 0x7f, 0x57,
	0xb7, 0xdc, 0xb2, 0x11, 0xb5, 0x71, 0x9e, 0xc3, 0xc8, 0x21, 0xdd, 0x40, 0xc3, 0x88, 0x23, 0x46,
	0xb4, 0x3c, 0xff, 0xdb, 0x83, 0x81, 0x9d, 0x8b, 0xdf, 0xc0, 0x50, 0x2b, 0xb9, 0x66, 0xbf, 0x59,
	0xf7, 0xe8, 0x78, 0x91, 0x11, 0x27, 0x35, 0xf1, 0x52, 0x93, 0x1b, 0x2f, 0x35, 0x8d, 0xb4, 0x92,
	0x1f, 0x0c, 0x8b, 0xdf, 0xc2, 0xd8, 0x34, 0x56, 0x62, 0xbb, 0x65, 0x95, 0x62, 0x9b, 0xb4, 0xf7,
	0x68, 0xf3, 0x48, 0x2b, 0xb9, 0xf4, 0x3c, 0x7e, 0x0a, 0xa1, 0x14, 0x7a, 0x5f, 0xb1, 0x34, 0x98,
	0xa1, 0x62, 0x48, 0xbb, 0xcc, 0xec, 0xbb, 0x29, 0x55, 0x99, 0xf6, 0x6d, 0xd5, 0xc6, 0xf8, 0x25,
	0xf4, 0x1f, 0xc4, 0xbe, 0x49, 0x07, 0x33, 0x54, 0x24, 0x8b, 0x89, 0xd3, 0xc4, 0x7c, 0xcb, 0x8f,
	0x62, 0xdf, 0x50, 0xfb, 0xd3, 0x34, 0x5a, 0x99, 0x43, 0x2b, 0xb3, 0x8d, 0xf3, 0x4b, 0x88, 0x3c,
	0x85, 0x63, 0x38, 0xbb, 0x5d, 0x7d, 0x59, 0x5d, 0xdd, 0xad, 0xa6, 0x4f, 0xf0, 0x19, 0x04, 0xf4,
	0xdd, 0xdd, 0x14, 0x99, 0x60, 0x79, 0xfd, 0x63, 0xda, 0xc3, 0x11, 0xf4, 0x3f, 0x5f, 0x5f, 0xad,
	0xa6, 0xc1, 0xe2, 0x0f, 0x82, 0xe0, 0x9b, 0x3e, 0xe0, 0x57, 0x10, 0xba, 0x13, 0xc1, 0x09, 0x39,
	0x39, 0xad, 0x6c, 0x42, 0x4e, 0x6f, 0xa7, 0x40, 0x06, 0x76, 0x4e, 0xe2, 0x84, 0x9c, 0x5c, 0x4a,
	0x36, 0x21, 0xa7, 0x16, 0xbf, 0x46, 0xe6, 0x3d, 0xc6, 0x23, 0x3c, 0x22, 0x47, 0x6e, 0x66, 0x63,
	0x72, 0x6c, 0xdc, 0x7d, 0x68, 0x25, 0xbc, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x56, 0xaa,
	0x7c, 0x0b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MuxClient is the client API for Mux service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MuxClient interface {
	// Send data, one item per message, collected from the hum
	Inject(ctx context.Context, opts ...grpc.CallOption) (Mux_InjectClient, error)
	// Listen to the hum
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Mux_ListenClient, error)
	// Ping debugging endpoint
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type muxClient struct {
	cc *grpc.ClientConn
}

func NewMuxClient(cc *grpc.ClientConn) MuxClient {
	return &muxClient{cc}
}

func (c *muxClient) Inject(ctx context.Context, opts ...grpc.CallOption) (Mux_InjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mux_serviceDesc.Streams[0], "/Mux/Inject", opts...)
	if err != nil {
		return nil, err
	}
	x := &muxInjectClient{stream}
	return x, nil
}

type Mux_InjectClient interface {
	Send(*InjectRequest) error
	CloseAndRecv() (*InjectResponse, error)
	grpc.ClientStream
}

type muxInjectClient struct {
	grpc.ClientStream
}

func (x *muxInjectClient) Send(m *InjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *muxInjectClient) CloseAndRecv() (*InjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *muxClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Mux_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mux_serviceDesc.Streams[1], "/Mux/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &muxListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mux_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type muxListenClient struct {
	grpc.ClientStream
}

func (x *muxListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *muxClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/Mux/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MuxServer is the server API for Mux service.
type MuxServer interface {
	// Send data, one item per message, collected from the hum
	Inject(Mux_InjectServer) error
	// Listen to the hum
	Listen(*ListenRequest, Mux_ListenServer) error
	// Ping debugging endpoint
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

// UnimplementedMuxServer can be embedded to have forward compatible implementations.
type UnimplementedMuxServer struct {
}

func (*UnimplementedMuxServer) Inject(srv Mux_InjectServer) error {
	return status.Errorf(codes.Unimplemented, "method Inject not implemented")
}
func (*UnimplementedMuxServer) Listen(req *ListenRequest, srv Mux_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedMuxServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterMuxServer(s *grpc.Server, srv MuxServer) {
	s.RegisterService(&_Mux_serviceDesc, srv)
}

func _Mux_Inject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MuxServer).Inject(&muxInjectServer{stream})
}

type Mux_InjectServer interface {
	SendAndClose(*InjectResponse) error
	Recv() (*InjectRequest, error)
	grpc.ServerStream
}

type muxInjectServer struct {
	grpc.ServerStream
}

func (x *muxInjectServer) SendAndClose(m *InjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *muxInjectServer) Recv() (*InjectRequest, error) {
	m := new(InjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mux_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MuxServer).Listen(m, &muxListenServer{stream})
}

type Mux_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type muxListenServer struct {
	grpc.ServerStream
}

func (x *muxListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Mux_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mux/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mux_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Mux",
	HandlerType: (*MuxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Mux_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inject",
			Handler:       _Mux_Inject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _Mux_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mux.proto",
}
